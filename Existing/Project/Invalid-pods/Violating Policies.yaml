apiVersion: apps/v1
kind: Deployment
metadata:
  name: invalid-pod-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: invalid-app
  template:
    metadata:
      labels:
        app: invalid-app
    spec:
      containers:
        - name: nginx
          image: nginx:latest  # Invalid image based on policy to block "latest"
          securityContext:
            runAsUser: 0  # Invalid: this is running as root, violating the non-root user policy
            runAsNonRoot: false  # Invalid: non-root should be enforced
            allowPrivilegeEscalation: true  # Invalid: escalation is not allowed in the policy
          resources:
            requests:
              cpu: "200m"
              memory: "512Mi"
            limits:
              cpu: "500m"
              memory: "1Gi"



# Break Down:

1. Policy: Generate

Purpose: This policy automatically adds any missing fields, like securityContext, which are necessary for hardening the pod configuration. It ensures that the pod template contains essential fields like securityContext.
Status: The policy should have added the securityContext to the pod if it was missing. In your case, the securityContext seems to be properly defined already with runAsUser, runAsNonRoot, and allowPrivilegeEscalation, so it is not violated by the current configuration.

2. Policy: Auto Add (Security Context Enforcement)

Purpose: This policy automatically adds security context to the container specification to enforce a non-root user and other security restrictions.
Status: The securityContext in your YAML file appears to have been added automatically by Kyverno, which is in line with the policy requirements. However, the policy might still be catching something, like missing or incorrect values for certain security context fields (for example, setting a readOnlyRootFilesystem).

3. Policy: Block

Purpose: This policy ensures that only certain conditions are met before allowing the creation of resources. For example, it blocks containers that attempt to run as root.
Status: The securityContext you provided prevents privilege escalation and requires a non-root user (runAsUser: 1000), so this policy should not be violated. However, if any privileged or insecure settings were in place, this policy would block the pod creation. If there are issues with other security-related aspects (like file system settings), it could block the pod.

4. Policy: Verify Image

Purpose: This policy ensures that only trusted images from approved registries are used. It checks the image's source and version, blocking untrusted or insecure images.
Violation: The error message clearly indicates that the image (nginx:latest) in your YAML file is not from a trusted registry. This is why the pod creation was denied. The verify-image-policy policy checks for specific image repositories or tags, and the latest tag for nginx is considered an insecure or untrusted image (because it could potentially fetch an updated image with unknown security risks).

Fix: To pass this policy, you need to use a trusted image with a version (e.g., nginx:1.21 instead of nginx:latest), ensuring that the image comes from a secure, vetted registry.
To Sum It Up:

> The verify-image-policy is causing the pod creation to fail because it does not trust the nginx:latest image.
> The other three policies (Generate, Auto Add, Block) seem to be followed properly with the current securityContext configuration, but there could be additional validation issues (like missing readOnlyRootFilesystem or other security settings) that might be causing unexpected results.

What You Can Do:

    Replace the nginx:latest image with a versioned and trusted image (e.g., nginx:1.21.0).
    Ensure that your image registry is configured correctly in the Kyverno policies, especially for trusted images.