apiVersion: apps/v1
kind: Deployment
metadata:
  name: test-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: test-app
  template:
    metadata:
      labels:
        app: test-app
    spec:
      containers:
        - name: nginx
          image: nginxinc/nginx-unprivileged
          securityContext:
            runAsUser: 1000  # Non-root user
            runAsNonRoot: true
            allowPrivilegeEscalation: false
          resources:
            requests:
              cpu: "100m"
              memory: "128Mi"
            limits:
              cpu: "200m"
              memory: "256Mi"

---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: verify-image-policy
spec:
  validationFailureAction: enforce
  rules:
    - name: validate-image
      match:
        resources:
          kinds:
            - Pod
      validate:
        message: "Image is not from a trusted registry."
        pattern:
          spec:
            containers:
              - image: "nginxinc/*"


#Let's break it down according to the four policies you need:
1. Generate Policy (Auto Add Security Context)

>> Satisfies: The security context is explicitly defined in the container specification, ensuring that the container runs as a non-root user (runAsUser: 1000 and runAsNonRoot: true), which satisfies the policy of enforcing non-root users.

2. Auto Add Policy (Enforce Default Security Settings)

>> Satisfies: The security context settings, such as runAsUser and runAsNonRoot, are added to enforce security at the container level. This ensures that the pod doesn't run as root, which adds an extra layer of security.

3. Block Policy (Block Privileged Escalation)

>> Satisfies: The setting allowPrivilegeEscalation: false ensures that the container does not allow privilege escalation. This is part of a security hardening policy, effectively blocking any process from gaining elevated privileges during runtime.

4. Verify Image Policy (Image Verification for Compliance)

>> Does not specify verification directly: To satisfy this policy fully, you may need to enforce image verification using tools like Kyverno or an image scanning tool to check if the image used (nginxinc/nginx-unprivileged) meets your organization's security compliance requirements. You could enforce this policy by creating a Kyverno policy to allow only approved images from trusted registries.

#Improvements

For full verification of image security, you can use Kyverno policies such as:

>This ensures that only images from nginxinc (or any specific trusted registry) are used in the pods.

>With these explanations, the provided YAML satisfies most of the core security policies, but adding image verification will enhance the compliance further.


1.Deployment Configuration:
        Non-root user (runAsUser: 1000, runAsNonRoot: true)
        No privilege escalation (allowPrivilegeEscalation: false)
        Resources and limits set for CPU and memory

2.Kyverno Image Verification Policy:
        The ClusterPolicy ensures that only images from the nginxinc registry (or any custom image registry that matches nginxinc/*) are allowed in the pods.

How it works:

    The Deployment will launch the nginx-inc/nginx-unprivileged image, ensuring non-root execution and no privilege escalation.
    The Kyverno policy will verify that the image is from a trusted registry (nginxinc/*), enforcing compliance at the cluster level.

This combined YAML file will satisfy the security policies, including image verification, while ensuring the pod runs securely with the specified settings.